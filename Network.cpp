#include <iostream>
#include <string>
#include "Network.h"

// Initialize winsock
bool Client::Initialize_winsock()
{
	int iResult = WSAStartup(version, &wsaData);
	if (iResult != 0)
	{
		std::cout << "WSAStartup failed: " << iResult << "\n";
		return false;
	}
	return true;
}

// Create a socket
bool Client::CreateSocket()
{
	SOCKET sock = socket(AF_INET, SOCK_STREAM, 0);
	if (sock == INVALID_SOCKET)
	{
		std::cout << "Can't create socket, Error #" << WSAGetLastError() << "\n";
		WSACleanup();
		return false;
	}
	this->sock = sock;
	return true;
}

// Bind the ip address and port to a socket
bool Client::Connect(std::string ipAddress, int port)
{
	this->hint.sin_family = AF_INET;
	this->hint.sin_port = htons(port);
	inet_pton(AF_INET, ipAddress.c_str(), &this->hint.sin_addr);

	// Connect to server
	while (connect(this->sock, (sockaddr*)&this->hint, sizeof(this->hint)) == SOCKET_ERROR)
	{
		std::cout << "Can't conect to server, Error #" << WSAGetLastError() << "\nTry Again in 5 seconds..\n";
		Sleep(5000);
	}
	return true;
}

// Start The Connection
bool Client::Start(std::string ip_address, int port)
{
	if (!Initialize_winsock())
		return false;
	std::cout << "Initialize Winsock Success!\n";
	if (!CreateSocket())
		return false;
	std::cout << "Create Socket Success!\n";
	if (!Connect(ip_address, port))
		return false;
	std::cout << "Connect Success!\n\n";
	return true;
}

// Simple way to send Message
bool Client::Send(std::string msg)
{
	std::cout << "Send\n\n";
	int iSendResult = send(this->sock, msg.c_str(), msg.size() + 1, 0);
	if (iSendResult == SOCKET_ERROR)
	{
		std::cout << "send failed with error: " << WSAGetLastError() << "\n";
		return false;
	}
	return true;
}

// Simple way to recieve Message
bool Client::Recv(std::string& result)
{
	std::cout << "Get\n\n";
	char buf[4096];
	ZeroMemory(buf, 4096);

	int bytesReeceived = recv(this->sock, buf, 4096, 0);

	if (bytesReeceived == SOCKET_ERROR)
	{
		std::cout << "Error in recv(). Error code #" << WSAGetLastError() << "\n";
		return false;
	}
	result = std::string(buf, 0, bytesReeceived);
	return true;
}

// Send File Function
bool Client::SendFile(std::string filePath)
{
	int fileSize = 0;
	char buf[256];
	DWORD bytesRead = sizeof(DWORD);

	HANDLE hFile = CreateFileA(filePath.c_str(), GENERIC_READ, FILE_SHARE_READ | FILE_SHARE_WRITE, NULL, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, NULL);
	if (hFile != INVALID_HANDLE_VALUE)
		fileSize = GetFileSize(hFile, NULL);

	std::cout << "Size:\n";
	std::cout << fileSize << "\n\n";

	Send(std::to_string(fileSize));
	if (fileSize == 0)
	{
		CloseHandle(hFile);
		return false;
	}

	while (bytesRead != 0)
	{
		ReadFile(hFile, buf, sizeof(buf), &bytesRead, NULL);
		send(this->sock, buf, bytesRead, 0);
	}

	CloseHandle(hFile);
	return true;
}

// Recieve File Function
bool Client::RecvFile(std::string save_path)
{
	int fileSize = 0;
	std::string result;
	HANDLE hFile = CreateFileA(save_path.c_str(), GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, NULL, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, NULL);
	if (hFile != INVALID_HANDLE_VALUE)
	{
		if (!Recv(result))
			return false;
		fileSize = atoi(result.c_str());
	}
	std::cout << "File Size: " << fileSize << "\n";

	if (fileSize == 0)
	{
		CloseHandle(hFile);
		DeleteFileA(save_path.c_str());
		return false;
	}

	int total_recv = 0;
	char buf[256];
	Sleep(50);

	while (total_recv <= fileSize)
	{
		recv(this->sock, buf, sizeof(buf), 0);
		WriteFile(hFile, buf, sizeof(buf), NULL, NULL);
		total_recv += sizeof(buf);
	}

	Sleep(50);
	std::cout << "Total Recv: " << total_recv << "\n\n";
	std::cout << "Done\n";

	CloseHandle(hFile);
	return true;
}